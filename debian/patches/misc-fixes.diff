# DP: misc. fixes, should go upstream

--- a/docs/man/xrdp-dis.1
+++ b/docs/man/xrdp-dis.1
@@ -1,4 +1,4 @@
-.TH "xrdp-dis" "8" "0.7.0" "xrdp team"
+.TH "xrdp-dis" "1" "0.7.0" "xrdp team"
 .SH NAME
 xrdp\-dis \- xrdp disconnect utility
 
@@ -7,7 +7,7 @@ xrdp\-dis \- xrdp disconnect utility
 
 .SH DESCRIPTION
 .PP
-\fBxrdp\-dix\fP is run with no parameters to disconnect your xrdp session.
+\fBxrdp\-dis\fP is run with no parameters to disconnect your xrdp session.
 
 .SH ENVIRONMENT
 .TP
--- a/librfxcodec/configure.ac
+++ b/librfxcodec/configure.ac
@@ -9,7 +9,7 @@ AC_PROG_CC
 AC_C_CONST
 AC_PROG_LIBTOOL
 
-AM_CONDITIONAL(GOT_PREFIX, test "x${prefix}" != "xNONE"])
+AM_CONDITIONAL(GOT_PREFIX, [test "x${prefix}" != "xNONE" && test "x${prefix}" != "x/usr"])
 
 if test "x${prefix}" = "xNONE" ; then
 sysconfdir="/etc";
--- a/sesman/chansrv/chansrv_fuse.c
+++ b/sesman/chansrv/chansrv_fuse.c
@@ -58,6 +58,9 @@ char g_fuse_clipboard_path[256] = ""; /*
 
 #include "arch.h"
 #include "chansrv_fuse.h"
+#include "chansrv.h"
+#include "devredir.h"
+#include "file.h"
 
 /* dummy calls when XRDP_FUSE is not defined */
 int xfuse_init(void)            { return 0; }
@@ -104,6 +107,9 @@ void xfuse_devredir_cb_file_close(void *
 #include "chansrv_fuse.h"
 #include "list.h"
 #include "fifo.h"
+#include "chansrv.h"
+#include "devredir.h"
+#include "file.h"
 
 #ifndef EREMOTEIO
 #define EREMOTEIO EIO
@@ -122,6 +128,7 @@ void xfuse_devredir_cb_file_close(void *
 #define LOG_ERROR   0
 #define LOG_INFO    1
 #define LOG_DEBUG   2
+#undef LOG_LEVEL
 #define LOG_LEVEL   LOG_ERROR
 
 #define log_error(_params...)                           \
@@ -265,7 +272,9 @@ static void xfuse_create_file(fuse_req_t
 #endif
 
 static void xfuse_dump_fs(void);
+#if 0
 static void xfuse_dump_xrdp_inode(struct xrdp_inode *xino);
+#endif
 static tui32 xfuse_get_device_id_for_inode(tui32 ino, char *full_path);
 static void fuse_reverse_pathname(char *full_path, char *reverse_path);
 
@@ -277,13 +286,17 @@ static struct xrdp_inode * xfuse_create_
                                                         int type);
 
 static int  xfuse_does_file_exist(int parent, char *name);
+#if 0
 static int  xfuse_delete_file(int parent, char *name);
+#endif
 static int  xfuse_delete_file_with_xinode(XRDP_INODE *xinode);
 static int  xfuse_delete_dir_with_xinode(XRDP_INODE *xinode);
 static int  xfuse_recursive_delete_dir_with_xinode(XRDP_INODE *xinode);
 static void xfuse_update_xrdpfs_size(void);
+#ifdef USE_SYNC_FLAG
 static void xfuse_enum_dir(fuse_req_t req, fuse_ino_t ino, size_t size,
                            off_t off, struct fuse_file_info *fi);
+#endif
 
 /* forward declarations for calls we make into devredir */
 int dev_redir_get_dir_listing(void *fusep, tui32 device_id, char *path);
@@ -306,9 +319,11 @@ static void xfuse_cb_lookup(fuse_req_t r
 static void xfuse_cb_getattr(fuse_req_t req, fuse_ino_t ino,
                              struct fuse_file_info *fi);
 
+#if 0
 /* this is not a callback, but it's used by xfuse_cb_readdir() */
 static void xfuse_dirbuf_add(fuse_req_t req, struct dirbuf *b,
                              const char *name, fuse_ino_t ino);
+#endif
 
 static int xfuse_dirbuf_add1(fuse_req_t req, struct dirbuf1 *b,
                              const char *name, fuse_ino_t ino);
@@ -353,8 +368,10 @@ static void xfuse_cb_create(fuse_req_t r
                             const char *name, mode_t mode,
                             struct fuse_file_info *fi);
 
+#if 0
 static void xfuse_cb_fsync(fuse_req_t req, fuse_ino_t ino, int datasync,
                            struct fuse_file_info *fi);
+#endif
 
 static void xfuse_cb_setattr(fuse_req_t req, fuse_ino_t ino, struct stat *attr,
                              int to_set, struct fuse_file_info *fi);
@@ -1070,7 +1087,7 @@ static void xfuse_dump_fs()
                   xinode->nentries, xinode->nopen, xinode->is_synced,
                   xinode->name);
     }
-    log_debug("");
+    log_debug("end of xfuse_dump_fs");
 }
 
 /**
@@ -1079,20 +1096,22 @@ static void xfuse_dump_fs()
  * @param xino xinode structure to dump
  *****************************************************************************/
 
+#if 0
 static void xfuse_dump_xrdp_inode(struct xrdp_inode *xino)
 {
     log_debug("--- dumping struct xinode ---");
     log_debug("name:          %s", xino->name);
-    log_debug("parent_inode:  %ld", xino->parent_inode);
-    log_debug("inode:         %ld", xino->inode);
+    log_debug("parent_inode:  %ld", (long)xino->parent_inode);
+    log_debug("inode:         %ld", (long)xino->inode);
     log_debug("mode:          %o", xino->mode);
     log_debug("nlink:         %d", xino->nlink);
     log_debug("uid:           %d", xino->uid);
     log_debug("gid:           %d", xino->gid);
     log_debug("size:          %ld", xino->size);
     log_debug("device_id:     %d", xino->device_id);
-    log_debug("");
+    log_debug("--- end of struct xinode ---");
 }
+#endif
 
 /**
  * Return the device_id associated with specified inode and copy the
@@ -1289,10 +1308,12 @@ static int xfuse_does_file_exist(int par
     return 0;
 }
 
+#if 0
 static int xfuse_delete_file(int parent, char *name)
 {
     return -1;
 }
+#endif
 
 static int xfuse_delete_file_with_xinode(XRDP_INODE *xinode)
 {
@@ -1445,12 +1466,12 @@ int xfuse_devredir_cb_enum_dir(void *vp,
 
     if (!xfuse_is_inode_valid(fip->inode))
     {
-        log_error("inode %d is not valid", fip->inode);
+        log_error("inode %ld is not valid", (long)fip->inode);
         g_free(xinode);
         return -1;
     }
 
-    log_debug("parent_inode=%d name=%s", fip->inode, xinode->name);
+    log_debug("parent_inode=%ld name=%s", (long)fip->inode, xinode->name);
 
     /* if filename is . or .. don't add it */
     if ((strcmp(xinode->name, ".") == 0) || (strcmp(xinode->name, "..") == 0))
@@ -1463,8 +1484,8 @@ int xfuse_devredir_cb_enum_dir(void *vp,
 
     if ((xip = xfuse_get_inode_from_pinode_name(fip->inode, xinode->name)) != NULL)
     {
-        log_debug("inode=%d name=%s already exists in xrdp_fs; not adding it",
-                  fip->inode, xinode->name);
+        log_debug("inode=%ld name=%s already exists in xrdp_fs; not adding it",
+                  (long)fip->inode, xinode->name);
         g_free(xinode);
         xip->stale = 0;
         return -1;
@@ -1516,7 +1537,7 @@ void xfuse_devredir_cb_enum_dir_done(voi
     /* do we have a valid inode? */
     if (!xfuse_is_inode_valid(fip->inode))
     {
-        log_error("inode %d is not valid", fip->inode);
+        log_error("inode %ld is not valid", (long)fip->inode);
         if (fip->invoke_fuse)
             fuse_reply_err(fip->req, EBADF);
         goto done;
@@ -1610,8 +1631,8 @@ void xfuse_devredir_cb_open_file(void *v
         fh->FileId = FileId;
 
         fip->fi->fh = (uint64_t) ((long) fh);
-        log_debug("+++ XFUSE_INFO=%p XFUSE_INFO->fi=%p XFUSE_INFO->fi->fh=%p",
-                  fip, fip->fi, fip->fi->fh);
+        log_debug("+++ XFUSE_INFO=%p XFUSE_INFO->fi=%p XFUSE_INFO->fi->fh=%llX",
+                  fip, fip->fi, (unsigned long long)fip->fi->fh);
     }
 
     if (fip->invoke_fuse)
@@ -1714,8 +1735,8 @@ void xfuse_devredir_cb_write_file(void *
         return;
     }
 
-    log_debug("+++ XFUSE_INFO=%p, XFUSE_INFO->fi=%p XFUSE_INFO->fi->fh=%p",
-              fip, fip->fi, fip->fi->fh);
+    log_debug("+++ XFUSE_INFO=%p, XFUSE_INFO->fi=%p XFUSE_INFO->fi->fh=%llX",
+              fip, fip->fi, (unsigned long long)fip->fi->fh);
 
     fuse_reply_write(fip->req, length);
 
@@ -1723,7 +1744,7 @@ void xfuse_devredir_cb_write_file(void *
     if ((xinode = g_xrdp_fs.inode_table[fip->inode]) != NULL)
         xinode->size += length;
     else
-        log_error("inode at inode_table[%d] is NULL", fip->inode);
+        log_error("inode at inode_table[%ld] is NULL", (long)fip->inode);
 
     free(fip);
 }
@@ -1844,12 +1865,12 @@ void xfuse_devredir_cb_file_close(void *
         return;
     }
 
-    log_debug("+++ XFUSE_INFO=%p XFUSE_INFO->fi=%p XFUSE_INFO->fi->fh=%p",
-              fip, fip->fi, fip->fi->fh);
+    log_debug("+++ XFUSE_INFO=%p XFUSE_INFO->fi=%p XFUSE_INFO->fi->fh=%llX",
+              fip, fip->fi, (unsigned long long)fip->fi->fh);
 
     if ((xinode = g_xrdp_fs.inode_table[fip->inode]) == NULL)
     {
-        log_debug("inode_table[%d] is NULL", fip->inode);
+        log_debug("inode_table[%ld] is NULL", (long)fip->inode);
         fuse_reply_err(fip->req, EBADF);
         return;
     }
@@ -1895,7 +1916,7 @@ static void xfuse_cb_lookup(fuse_req_t r
 
     if (!xfuse_is_inode_valid(parent))
     {
-        log_error("inode %d is not valid", parent);
+        log_error("inode %ld is not valid", (long)parent);
         fuse_reply_err(req, EBADF);
         return;
     }
@@ -1903,7 +1924,7 @@ static void xfuse_cb_lookup(fuse_req_t r
     xinode = xfuse_get_inode_from_pinode_name(parent, name);
     if (xinode == NULL)
     {
-        log_debug("did not find entry for parent=%d name=%s", parent, name);
+        log_debug("did not find entry for parent=%ld name=%s", (long)parent, name);
         fuse_reply_err(req, ENOENT);
         return;
     }
@@ -1924,8 +1945,8 @@ static void xfuse_cb_lookup(fuse_req_t r
     e.generation = 1;
 
     fuse_reply_entry(req, &e);
-    log_debug("found entry for parent=%d name=%s uid=%d gid=%d",
-              parent, name, xinode->uid, xinode->gid);
+    log_debug("found entry for parent=%ld name=%s uid=%d gid=%d",
+              (long)parent, name, xinode->uid, xinode->gid);
     return;
 }
 
@@ -1946,7 +1967,7 @@ static void xfuse_cb_getattr(fuse_req_t
     /* if ino is not valid, just return */
     if (!xfuse_is_inode_valid(ino))
     {
-        log_error("inode %d is not valid", ino);
+        log_error("inode %ld is not valid", (long)ino);
         fuse_reply_err(req, EBADF);
         return;
     }
@@ -1971,6 +1992,7 @@ static void xfuse_cb_getattr(fuse_req_t
  *
  *****************************************************************************/
 
+#if 0
 static void xfuse_dirbuf_add(fuse_req_t req, struct dirbuf *b,
                              const char *name, fuse_ino_t ino)
 {
@@ -1987,6 +2009,7 @@ static void xfuse_dirbuf_add(fuse_req_t
     fuse_add_direntry(req, b->p + oldsize, b->size - oldsize, name, &stbuf,
                       b->size);
 }
+#endif
 
 static int xfuse_dirbuf_add1(fuse_req_t req, struct dirbuf1 *b,
                              const char *name, fuse_ino_t ino)
@@ -2030,12 +2053,12 @@ static void xfuse_cb_readdir(fuse_req_t
     int              i;
     int              first_time;
 
-    log_debug("req=%p inode=%d size=%d offset=%d", req, ino, size, off);
+    log_debug("req=%p inode=%ld size=%zu offset=%lld", req, ino, size, (long long)off);
 
     /* do we have a valid inode? */
     if (!xfuse_is_inode_valid(ino))
     {
-        log_error("inode %d is not valid", ino);
+        log_error("inode %ld is not valid", (long)ino);
         fuse_reply_err(req, EBADF);
         return;
     }
@@ -2068,7 +2091,7 @@ static void xfuse_cb_readdir(fuse_req_t
             ti = g_xrdp_fs.inode_table[ino];
             if (!ti)
             {
-                log_debug("****** g_xrdp_fs.inode_table[%d] is NULL", ino);
+                log_debug("****** g_xrdp_fs.inode_table[%ld] is NULL", (long)ino);
                 fuse_reply_buf(req, NULL, 0);
                 return;
             }
@@ -2156,19 +2179,19 @@ static void xfuse_remove_dir_or_file(fus
     char        full_path[4096];
     tui32       device_id;
 
-    log_debug("entered: parent=%d name=%s", parent, name);
+    log_debug("entered: parent=%ld name=%s", (long)parent, name);
 
     /* is parent inode valid? */
     if (!xfuse_is_inode_valid(parent))
     {
-        log_error("inode %d is not valid", parent);
+        log_error("inode %ld is not valid", (long)parent);
         fuse_reply_err(req, EBADF);
         return;
     }
 
     if ((xinode = xfuse_get_inode_from_pinode_name(parent, name)) == NULL)
     {
-        log_error("did not find file with pinode=%d name=%s", parent, name);
+        log_error("did not find file with pinode=%ld name=%s", (long)parent, name);
         fuse_reply_err(req, EBADF);
         return;
     }
@@ -2262,14 +2285,14 @@ static void xfuse_cb_rename(fuse_req_t r
 
     tui32 device_id;
 
-    log_debug("entered: old_parent=%d old_name=%s new_parent=%d new_name=%s",
-              old_parent, old_name, new_parent, new_name);
+    log_debug("entered: old_parent=%ld old_name=%s new_parent=%ld new_name=%s",
+              (long)old_parent, old_name, (long)new_parent, new_name);
     xfuse_dump_fs();
 
     /* is old_parent inode valid? */
     if (!xfuse_is_inode_valid(old_parent))
     {
-        log_error("inode %d is not valid", old_parent);
+        log_error("inode %ld is not valid", (long)old_parent);
         fuse_reply_err(req, EINVAL);
         return;
     }
@@ -2277,7 +2300,7 @@ static void xfuse_cb_rename(fuse_req_t r
     /* is new_parent inode valid? */
     if (!xfuse_is_inode_valid(new_parent))
     {
-        log_error("inode %d is not valid", new_parent);
+        log_error("inode %ld is not valid", (long)new_parent);
         fuse_reply_err(req, EINVAL);
         return;
     }
@@ -2297,8 +2320,8 @@ static void xfuse_cb_rename(fuse_req_t r
     old_xinode = xfuse_get_inode_from_pinode_name(old_parent, old_name);
     if (old_xinode  == NULL)
     {
-        log_error("did not find file with pinode=%d name=%s",
-                  old_parent, old_name);
+        log_error("did not find file with pinode=%ld name=%s",
+                  (long)old_parent, old_name);
         fuse_reply_err(req, EBADF);
         return;
     }
@@ -2420,7 +2443,7 @@ static void xfuse_create_dir_or_file(fus
     /* is parent inode valid? */
     if ((parent == 1) || (!xfuse_is_inode_valid(parent)))
     {
-        log_error("inode %d is not valid", parent);
+        log_error("inode %ld is not valid", (long)parent);
         fuse_reply_err(req, EBADF);
         return;
     }
@@ -2502,7 +2525,7 @@ static void xfuse_cb_open(fuse_req_t req
 
     if (!xfuse_is_inode_valid(ino))
     {
-        log_error("inode %d is not valid", ino);
+        log_error("inode %ld is not valid", (long)ino);
         fuse_reply_err(req, EBADF);
         return;
     }
@@ -2511,7 +2534,7 @@ static void xfuse_cb_open(fuse_req_t req
     xinode = g_xrdp_fs.inode_table[ino];
     if (!xinode)
     {
-        log_debug("****** g_xrdp_fs.inode_table[%d] is NULL", ino);
+        log_debug("****** g_xrdp_fs.inode_table[%ld] is NULL", (long)ino);
         fuse_reply_err(req, EBADF);
         return;
     }
@@ -2582,13 +2605,12 @@ static void xfuse_cb_release(fuse_req_t
 {
     XFUSE_INFO   *fip    = NULL;
     XFUSE_HANDLE *handle = (XFUSE_HANDLE *) (tintptr) (fi->fh);
-    tui32         FileId;
 
-    log_debug("entered: ino=%d fi=%p fi->fh=%p", (int) ino, fi, fi->fh);
+    log_debug("entered: ino=%ld fi=%p fi->fh=%llX", (long)ino, fi, (unsigned long long)fi->fh);
 
     if (!xfuse_is_inode_valid(ino))
     {
-        log_error("inode %d is not valid", ino);
+        log_error("inode %ld is not valid", (long)ino);
         fuse_reply_err(req, EBADF);
         return;
     }
@@ -2596,7 +2618,7 @@ static void xfuse_cb_release(fuse_req_t
     XRDP_INODE *xinode = g_xrdp_fs.inode_table[ino];
     if (!xinode)
     {
-        log_debug("****** g_xrdp_fs.inode_table[%d] is NULL", ino);
+        log_debug("****** g_xrdp_fs.inode_table[%ld] is NULL", (long)ino);
         fuse_reply_err(req, 0);
         return;
     }
@@ -2632,10 +2654,9 @@ static void xfuse_cb_release(fuse_req_t
     fip->device_id = handle->DeviceId;
     fip->fi = fi;
 
-    log_debug(" +++ created XFUSE_INFO=%p XFUSE_INFO->fi=%p XFUSE_INFO->fi->fh=%p",
-              fip, fip->fi, fip->fi->fh);
+    log_debug(" +++ created XFUSE_INFO=%p XFUSE_INFO->fi=%p XFUSE_INFO->fi->fh=%llX",
+              fip, fip->fi, (unsigned long long)fip->fi->fh);
 
-    FileId = handle->FileId;
     fip->fi->fh = 0;
     xinode->close_in_progress = 1;
 
@@ -2768,8 +2789,8 @@ static void xfuse_cb_write(fuse_req_t re
     fusep->device_id = fh->DeviceId;
     fusep->fi = fi;
 
-    log_debug("+++ created XFUSE_INFO=%p XFUSE_INFO->fi=%p XFUSE_INFO->fi->fh=%p",
-              fusep, fusep->fi, fusep->fi->fh);
+    log_debug("+++ created XFUSE_INFO=%p XFUSE_INFO->fi=%p XFUSE_INFO->fi->fh=%llX",
+              fusep, fusep->fi, (unsigned long long)fusep->fi->fh);
 
     dev_redir_file_write(fusep, fh->DeviceId, fh->FileId, buf, size, off);
     log_debug("exiting");
@@ -2791,6 +2812,7 @@ static void xfuse_cb_create(fuse_req_t r
 /**
  *****************************************************************************/
 
+#if 0
 static void xfuse_cb_fsync(fuse_req_t req, fuse_ino_t ino, int datasync,
                            struct fuse_file_info *fi)
 {
@@ -2798,6 +2820,7 @@ static void xfuse_cb_fsync(fuse_req_t re
     log_debug("function not required");
     fuse_reply_err(req, EINVAL);
 }
+#endif
 
 /**
  *****************************************************************************/
@@ -2812,14 +2835,14 @@ static void xfuse_cb_setattr(fuse_req_t
 
     if (!xfuse_is_inode_valid(ino))
     {
-        log_error("inode %d is not valid", ino);
+        log_error("inode %ld is not valid", (long)ino);
         fuse_reply_err(req, EBADF);
         return;
     }
 
     if ((xinode = g_xrdp_fs.inode_table[ino]) == NULL)
     {
-        log_debug("g_xrdp_fs.inode_table[%d] is NULL", ino);
+        log_debug("g_xrdp_fs.inode_table[%ld] is NULL", (long)ino);
         fuse_reply_err(req, EBADF);
         return;
     }
@@ -2845,9 +2868,9 @@ static void xfuse_cb_setattr(fuse_req_t
 
     if (to_set & FUSE_SET_ATTR_SIZE)
     {
-        log_debug("previous file size: %d", attr->st_size);
+        log_debug("previous file size: %lld", (long long)attr->st_size);
         xinode->size = attr->st_size;
-        log_debug("returning file size: %d", xinode->size);
+        log_debug("returning file size: %zu", xinode->size);
     }
 
     if (to_set & FUSE_SET_ATTR_ATIME)
@@ -2928,11 +2951,11 @@ static int xfuse_proc_opendir_req(fuse_r
     char             full_path[4096];
     char            *cptr;
 
-    log_debug("inode=%d", ino);
+    log_debug("inode=%ld", (long)ino);
 
     if (!xfuse_is_inode_valid(ino))
     {
-        log_error("inode %d is not valid", ino);
+        log_error("inode %ld is not valid", (long)ino);
         fuse_reply_err(req, EBADF);
         g_free(fifo_remove(&g_fifo_opendir));
         return -1;
@@ -2943,7 +2966,7 @@ static int xfuse_proc_opendir_req(fuse_r
 
     if ((xinode = g_xrdp_fs.inode_table[ino]) == NULL)
     {
-        log_debug("g_xrdp_fs.inode_table[%d] is NULL", ino);
+        log_debug("g_xrdp_fs.inode_table[%ld] is NULL", (long)ino);
         fuse_reply_err(req, EBADF);
         g_free(fifo_remove(&g_fifo_opendir));
         return -1;
@@ -2965,16 +2988,17 @@ static int xfuse_proc_opendir_req(fuse_r
     {
         goto do_remote_lookup;
     }
-#endif
 
 do_remote_lookup:
 
+#endif
+
     xfuse_mark_as_stale((int) ino);
 
     log_debug("did not find entry; redirecting call to dev_redir");
     device_id = xfuse_get_device_id_for_inode((tui32) ino, full_path);
 
-    log_debug("dev_id=%d ino=%d full_path=%s", device_id, ino, full_path);
+    log_debug("dev_id=%d ino=%ld full_path=%s", device_id, (long)ino, full_path);
 
     if ((fip = calloc(1, sizeof(XFUSE_INFO))) == NULL)
     {
--- a/sesman/chansrv/devredir.h
+++ b/sesman/chansrv/devredir.h
@@ -101,6 +101,8 @@ int dev_redir_file_open(void *fusep, tui
 
 int devredir_file_close(void *fusep, tui32 device_id, tui32 file_id);
 
+int APP_CC devredir_rmdir_or_file(void *fusep, tui32 device_id, char *path, int mode);
+
 int devredir_file_read(void *fusep, tui32 device_id, tui32 FileId,
                         tui32 Length, tui64 Offset);
 
--- a/sesman/session.c
+++ b/sesman/session.c
@@ -609,7 +609,7 @@ session_start_fork(int width, int height
                 else
                 {
                     log_message(LOG_LEVEL_ERROR, "another Xserver might "
-                                "already be active on display %d - see log", display);
+                                "already be active on display %d - see log; possibly comment out the two param lines -logfile /dev/null in /etc/xrdp/sesman.ini to debug", display);
                 }
 
                 log_message(LOG_LEVEL_DEBUG, "aborting connection...");
--- a/xorgxrdp/configure.ac
+++ b/xorgxrdp/configure.ac
@@ -9,7 +9,7 @@ AC_PROG_CC
 AC_C_CONST
 AC_PROG_LIBTOOL
 
-AM_CONDITIONAL(GOT_PREFIX, test "x${prefix}" != "xNONE"])
+AM_CONDITIONAL(GOT_PREFIX, [test "x${prefix}" != "xNONE" && test "x${prefix}" != "x/usr"])
 
 AC_CHECK_HEADER([xorg/xorg-server.h], [],
   [AC_MSG_ERROR([please install xserver-xorg-dev or xorg-x11-server-sdk])])
--- a/xorgxrdp/xrdpkeyb/rdpKeyboard.c
+++ b/xorgxrdp/xrdpkeyb/rdpKeyboard.c
@@ -525,7 +525,7 @@ rdpInputKeyboard(rdpPtr dev, int msg, lo
 }
 
 /******************************************************************************/
-void
+int
 rdpkeybDeviceInit(DeviceIntPtr pDevice, KeySymsPtr pKeySyms, CARD8 *pModMap)
 {
     int i;
@@ -557,7 +557,7 @@ rdpkeybDeviceInit(DeviceIntPtr pDevice,
     if (pKeySyms->map == 0)
     {
         LLOGLN(0, ("rdpkeybDeviceInit: malloc failed"));
-        exit(1);
+        return 1;
     }
     else
     {
@@ -573,6 +573,8 @@ rdpkeybDeviceInit(DeviceIntPtr pDevice,
     {
         pKeySyms->map[i] = g_kbdMap[i];
     }
+
+    return 0;
 }
 
 /******************************************************************************/
@@ -668,7 +670,8 @@ rdpkeybControl(DeviceIntPtr device, int
     switch (what)
     {
         case DEVICE_INIT:
-            rdpkeybDeviceInit(device, &keySyms, modMap);
+            if (rdpkeybDeviceInit(device, &keySyms, modMap))
+                return BadAlloc;
             memset(&set, 0, sizeof(set));
             set.rules = "base";
             set.model = "pc104";
--- a/xrdpapi/xrdpapi.c
+++ b/xrdpapi/xrdpapi.c
@@ -36,6 +36,7 @@
 #include <sys/un.h>
 
 #include "xrdpapi.h"
+#include "os_calls.h"
 
 struct wts_obj
 {
